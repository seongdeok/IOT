from time import sleep
import paho.mqtt.client as mqtt
import logging
import logging.handlers
import broadlink


ON = b"&\x00P\x00\x00\x01'\x94\x147\x137\x147\x13\x13\x13\x13\x12\x13\x13\x13\x137\x13\x13\x13\x13\x127\x147\x137\x146\x147\x13\x13\x137\x13\x13\x137\x13\x13\x13\x13\x137\x13\x13\x13\x13\x12\x13\x137\x14\x12\x137\x146\x14\x13\x136\x146\x13\x00\x04\xd6\x00\x01'I\x14\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00"
OFF = b"&\x00P\x00\x00\x01'\x94\x146\x147\x137\x14\x12\x13\x13\x13\x12\x14\x12\x137\x14\x12\x13\x13\x137\x137\x147\x137\x146\x14\x13\x13\x13\x12\x13\x13\x13\x136\x14\x12\x14\x12\x137\x147\x137\x137\x147\x13\x13\x137\x137\x13\x13\x13\x11\x14\x00\x04\xd5\x00\x01'J\x13\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00"
MUTE = b"&\x00X\x00\x00\x01'\x94\x147\x137\x146\x14\x12\x13\x13\x13\x12\x14\x12\x137\x14\x13\x13\x12\x137\x147\x137\x137\x147\x13\x12\x14\x12\x13\x13\x137\x13\x13\x137\x14\x12\x13\x12\x147\x137\x147\x13\x12\x147\x13\x12\x147\x137\x13\x12\x13\x00\x04\xd5\x00\x01(I\x14\x00\x0cV\x00\x01'J\x13\x00\r\x05"
VOL_UP = b"&\x00X\x00\x00\x01(\x94\x137\x146\x147\x13\x13\x13\x13\x13\x13\x12\x13\x137\x14\x12\x13\x13\x137\x137\x146\x147\x137\x14\x13\x12\x13\x13\x13\x13\x13\x127\x14\x13\x13\x12\x13\x13\x137\x137\x146\x147\x13\x13\x137\x137\x146\x14\x12\x13\x00\x04\xd5\x00\x01'J\x13\x00\x0cV\x00\x01'J\x13\x00\r\x05"
VOL_DOWN = b"&\x00X\x00\x00\x01'\x94\x147\x137\x147\x13\x13\x13\x13\x13\x12\x13\x13\x137\x13\x13\x13\x13\x136\x147\x137\x146\x147\x13\x13\x13\x13\x13\x13\x127\x147\x13\x13\x13\x13\x13\x12\x137\x146\x147\x13\x13\x13\x13\x136\x147\x137\x14\x12\x12\x00\x04\xd6\x00\x01'I\x14\x00\x0cV\x00\x01'I\x14\x00\r\x05"
DISC = b"&\x00X\x00\x00\x01'\x95\x137\x137\x147\x13\x12\x14\x12\x13\x13\x13\x12\x147\x13\x12\x14\x12\x137\x147\x137\x146\x147\x13\x13\x137\x13\x13\x13\x12\x147\x13\x12\x14\x12\x13\x13\x137\x13\x13\x137\x147\x13\x12\x147\x137\x137\x14\x11\x13\x00\x04\xd6\x00\x01'J\x13\x00\x0cV\x00\x01'I\x14\x00\r\x05"
CD = b"&\x00P\x00\x00\x01'\x94\x146\x147\x137\x14\x12\x13\x13\x13\x12\x14\x12\x137\x14\x12\x13\x13\x137\x137\x147\x137\x137\x14\x12\x146\x14\x12\x147\x13\x12\x14\x12\x13\x13\x13\x12\x146\x14\x12\x147\x13\x12\x147\x137\x137\x147\x13\x11\x14\x00\x04\xd5\x00\x01'J\x13\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00"
VIDEO = b"&\x00X\x00\x00\x01'\x94\x137\x147\x137\x13\x13\x13\x13\x13\x12\x13\x13\x137\x13\x13\x13\x12\x147\x137\x146\x147\x137\x14\x12\x13\x13\x137\x13\x13\x13\x12\x14\x12\x13\x13\x137\x137\x147\x13\x13\x137\x137\x147\x137\x13\x13\x13\x11\x14\x00\x04\xd5\x00\x01'J\x13\x00\x0cV\x00\x01'J\x13\x00\r\x05"
AUX = b"&\x00X\x00\x00\x01'\x94\x147\x137\x137\x14\x12\x13\x13\x13\x12\x14\x13\x127\x14\x13\x12\x13\x137\x137\x147\x137\x146\x14\x12\x147\x137\x13\x13\x137\x137\x14\x12\x14\x12\x137\x14\x13\x12\x13\x137\x13\x12\x14\x13\x136\x147\x13\x12\x13\x00\x04\xd5\x00\x01(I\x14\x00\x0cU\x00\x01(I\x14\x00\r\x05"
TUNNER = b"&\x00P\x00\x00\x01'\x94\x147\x137\x137\x14\x13\x12\x13\x13\x12\x14\x13\x127\x14\x12\x14\x13\x127\x147\x137\x137\x147\x13\x12\x147\x13\x13\x137\x137\x146\x14\x12\x146\x147\x13\x13\x137\x13\x13\x13\x12\x14\x13\x127\x14\x12\x13\x12\x13\x00\x04\xd7\x00\x01'J\x13\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00"
TAPE = b"&\x00X\x00\x00\x01'\x94\x147\x137\x146\x14\x12\x14\x13\x12\x13\x13\x12\x146\x14\x13\x13\x12\x137\x147\x137\x137\x147\x13\x13\x137\x13\x13\x137\x137\x14\x12\x13\x13\x13\x12\x147\x13\x12\x147\x13\x12\x14\x12\x137\x147\x137\x13\x12\x13\x00\x04\xd6\x00\x01'J\x13\x00\x0cV\x00\x01'J\x13\x00\r\x05"


def get_logger():
    log = logging.getLogger(__name__)
    log.setLevel(logging.DEBUG)
    handler = logging.handlers.SysLogHandler(address='/dev/log')
    formatter = logging.Formatter('%(module)s.%(funcName)s: %(message)s')
    handler.setFormatter(formatter)
    log.addHandler(handler)
    return log

def check_audio():
    try:
        with open('/proc/asound/card0/stream0', 'r') as file:
            res = file.readlines()
    except Exception as e:
        print(f"Error reading audio status: {e}")
        return False

    ret = False
    for line in res:
        if 'Status: Running' in line:
            ret = True
            break

    return ret

def publish(on):
    broker_address = '192.168.219.200'
    mqttc = mqtt.Client('moode')
    mqttc.connect(broker_address)
    topic = 'music/moode'
    if on:
        state = 'playing'
    else:
        state = 'stop'
    mqttc.publish(topic, state)
    mqttc.disconnect()

def set_power(device, on):
    if on:
        device.send_data(ON)
    else:
        device.send_data(OFF)


offcnt = 10
logger = get_logger()

state = False
cnt = 0
USE_MQTT = False

if not USE_MQTT:
    device = broadlink.hello('192.168.219.155')
    device.auth()


while 1:
    new_state = check_audio()
    if state != new_state:
        cnt -= 1
    else:
        if state:
            cnt = offcnt
        else:
            cnt = 0
    if cnt < 0:
        logger.info('Before = ' + str(state) + ' After state = ' + str(new_state))
        if new_state:
            cnt = offcnt
            state = True
            #mqttc.publish( topic, 'playing')
            if USE_MQTT:
                publish(True)
            else :
                set_power(True)
        else:
            cnt = 0
            state = False
            #mqttc.publish( topic, 'stop')
            if USE_MQTT:
                publish(False)
            else :
                set_power(False)
    sleep(1)
    logger.debug('state = ' + str(state) + ' cnt = ' + str(cnt))